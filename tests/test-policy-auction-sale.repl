(env-data {"disable-marmalade":true})
(load "kadena_repl_sandbox/kda-env/init.repl")
(load "init/init-ledger.repl")
(load "init/init-policy-auction-sale.repl")

(begin-tx)
(load "tools/events_analyzer.pact")
(commit-tx)

(begin-tx "Create a token")
(env-hash (hash "CreateTx"))
(use marmalade-ng.ledger)
(env-data {'create-ks:["create"],
           'alice-ks:["alice-key"]})

(print (+ "Token ID: => " (create-token-id (read-keyset 'create-ks) "http://token-1-auction" )))

(env-sigs [{'key:"create", 'caps:[(ENFORCE-RESERVED)]}])

(create-token "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" 1 "http://token-1-auction"
              [marmalade-ng.policy-auction-sale] (read-keyset 'create-ks))

(mint "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" (read-keyset 'alice-ks) 0.6)

(commit-tx)

(begin-tx "Sales")
(env-hash (hash "auction-sale-1"))
(env-chain-data {"block-time": (time "2023-01-01T00:00:00Z")})
(print (format "Sale ID 1: => {}" [(tx-hash)]))

; Alice will sell 0.1
(use marmalade-ng.ledger)
(use marmalade-ng.policy-auction-sale)

(env-sigs [ {'key:"alice-key", 'caps:[(OFFER "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1)]}
           ])

(expect "Balance of was 0.6" 0.6 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice"))


; try without env-data
(expect-failure "No env-data provided" "No policy to handle the offer"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))


; Try with a valid marmalade_sale but with a mssing auction msg
(env-data {'marmalade_sale:{'sale_type:"auction", 'currency:coin }})
(expect-failure "auction_quote not present in data" "auction not present in data"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))
; Try with a missing recipient
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"", 'start_price:10.0, 'increment_ratio:1.1 }})

(expect-failure "bad recipient" "Account name does not conform"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))

; Try with a bad starting price
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:-10.0, 'increment_ratio:1.1 }})

(expect-failure "bad price" "Price out of range"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))

; Try with an unknown account
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"unknown", 'start_price:10.0, 'increment_ratio:1.1 }})

(expect-failure "unknown KDA account" "does not exist"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))

; Try with a bad increment ratio
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:10.0, 'increment_ratio:0.9 }})

(expect-failure "bad increment ratio" "Increment must be > 1"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z")))

; Try with a NO-TIMEOUT
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:10.0, 'increment_ratio:1.1 }})

(expect-failure "bad timeout" "not supported"
  (sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 NO-TIMEOUT))

; Now try exrything good
(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:10.0, 'increment_ratio:1.1 }})

(env-events true)
(sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.1 (time "2023-06-01T00:00:00Z"))

(ev-analyzer.store (env-events true))
(expect "Event AUCTION-SALE-OFFER has been emitted" true (ev-analyzer.is-present "AUCTION-SALE-OFFER"))
(expect "Event AUCTION-SALE-OFFER -> sale_id" (hash "auction-sale-1") (ev-analyzer.param "AUCTION-SALE-OFFER" 0))
(expect "Event AUCTION-SALE-OFFER -> token_id" "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" (ev-analyzer.param "AUCTION-SALE-OFFER" 1))
(expect "Event AUCTION-SALE-OFFER -> price" 10.0 (ev-analyzer.param "AUCTION-SALE-OFFER" 2))
(expect "Event AUCTION-SALE-OFFER -> currency" "coin" (ev-analyzer.param "AUCTION-SALE-OFFER" 3))

; Verify that 0.1 has been deducted from the balance of Alice
(expect "Balance of alice is 0.6 - 0.1" 0.5 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice"))

(expect-that "It should exist 1 active sale" (compose (length) (= 1)) (get-all-active-sales))
(expect-that "It should exist 1 active sale" (compose (length) (= 1)) (get-sales-for-token "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8"))
(expect-that "It should exist 0 ended sale" (compose (length) (= 0)) (get-ended-sales))
(expect-that "It should exist 1 active sale from alice" (compose (length) (= 1)) (get-sales-from-account "alice"))
(expect-that "It should exist 0 active sale from bob" (compose (length) (= 0)) (get-sales-from-account "bob"))

(print (+ "Escrow account: => " (at 'escrow-account (get-sale (tx-hash)))))
(commit-tx)

(begin-tx "Bob wants to bid")
(env-chain-data {"block-time": (time "2023-01-02T00:00:00Z")})
(use marmalade-ng.policy-auction-sale)
(env-data {'bob-ks:["bob-key"]})


(env-sigs [ {'key:"bob-key", 'caps:[(coin.TRANSFER "bob" "c:09-juxzBu412pfsgBlM6Au7fOnwvSsX78Er66vnC6sI" 10.0)]}
           ])

; Try with an amount lower than the starting price
(expect-failure "Below the starting price" "Price too low"
               (place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "bob" (read-keyset 'bob-ks) 9.9))

; Now with the right price
(env-events true)
(place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "bob" (read-keyset 'bob-ks) 10.0)

; Check the events
(ev-analyzer.store (env-events true))
(expect "Bid Event is present" true (ev-analyzer.is-present "PLACE-BID"))
(expect "Bid params" ["utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "bob" 10.0 "coin"] (ev-analyzer.params "PLACE-BID"))


; Verify that bob KDA account has been debited
(expect "Balance should be 990" 990.0 (coin.get-balance "bob"))

; Verify that the buyer has been recorded
(expect-that "Buyer has been recoreded" (compose (at 'current-buyer) (= "bob")) (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))

; We are far from triggering the time extension; verify that the timeout didn't move
(expect-that "Timeout is the same" (compose (at 'timeout) (= (time "2023-06-01T00:00:00Z")))
             (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))

(commit-tx)


(begin-tx "Carol wants to bid")
(env-chain-data {"block-time": (time "2023-01-03T00:00:00Z")})
(use marmalade-ng.policy-auction-sale)
(env-data {'carol-ks:["carol-key"]})

(env-sigs [ {'key:"carol-key", 'caps:[(coin.TRANSFER "carol" "c:09-juxzBu412pfsgBlM6Au7fOnwvSsX78Er66vnC6sI" 11.0)]}
           ])

; The minium amount to bid is 10.0 * 10% = 11.0

; Try with an amount lower than the starting price
(expect-failure "Below the starting price" "Price too low"
               (place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "carol" (read-keyset 'carol-ks) 10.99))

; Now with the right price
(place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "carol" (read-keyset 'carol-ks) 11.0)

; Verify that carol KDA account has been debited
(expect "Balance should be 989" 989.0 (coin.get-balance "carol"))

; Verify that bob KDA account has been refunded
(expect "Balance should be 1000" 1000.0 (coin.get-balance "bob"))

; Verify that the buyer has been recorded
(expect-that "Buyer has been recoreded" (compose (at 'current-buyer) (= "carol")) (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))
(commit-tx)


;; Bob will bid again
(begin-tx "Bob bids again")
(env-chain-data {"block-time": (time "2023-01-04T00:00:00Z")})
(use marmalade-ng.policy-auction-sale)
(env-data {'bob-ks:["bob-key"]})

(env-sigs [ {'key:"bob-key", 'caps:[(coin.TRANSFER "bob" "c:09-juxzBu412pfsgBlM6Au7fOnwvSsX78Er66vnC6sI" 20.0)]}
           ])

; The minium amount to bid is 11.0 * 10% = 12.1

; Try with an amount lower than the starting price
(expect-failure "Below the starting price" "Price too low"
               (place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "bob" (read-keyset 'bob-ks) 12.09))

; Now with the right price
(place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "bob" (read-keyset 'bob-ks) 13.0)

; Verify that bob KDA account has been debited
(expect "Balance should be 989" 987.0 (coin.get-balance "bob"))

; Verify that carol KDA account has been refunded
(expect "Balance should be 1000" 1000.0 (coin.get-balance "carol"))

; Verify that the buyer has been recorded
(expect-that "Buyer has been recoreded" (compose (at 'current-buyer) (= "bob")) (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))
(commit-tx)



; Bob believes he has won and want to close the defpact, howver it's too early
; The auction last 6 months
(begin-tx "Bob wants to close the defpact")
(env-chain-data {"block-time": (time "2023-01-05T00:00:00Z")})
(use marmalade-ng.ledger)

(env-data {'buyer:"bob", 'buyer-guard:{'pred:"keys-all", 'keys:["bob-key"]}})
(expect-failure "To early to end the defpact" "Sale not ended"
                (continue-pact 1 false (hash "auction-sale-1")))
(commit-tx)


; try an extension timeout
; Carol will bid just 29 minutes before the end
(begin-tx "Carol wants to bid just before the end")
(env-chain-data {"block-time": (time "2023-05-31T23:51:00Z")})
(use marmalade-ng.policy-auction-sale)
(env-data {'carol-ks:["carol-key"]})

(env-sigs [ {'key:"carol-key", 'caps:[(coin.TRANSFER "carol" "c:09-juxzBu412pfsgBlM6Au7fOnwvSsX78Er66vnC6sI" 15.0)]}
           ])

; We check that before the bid, timeout is the original one
(expect-that "Timeout is the same" (compose (at 'timeout) (= (time "2023-06-01T00:00:00Z")))
             (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))


(place-bid "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E" "carol" (read-keyset 'carol-ks) 15.0)

; Verify that the time has been extended
(expect-that "Timeout has been extended" (compose (at 'timeout) (= (time "2023-06-01T00:01:00Z")))
             (get-sale "utRLLLbDcGyMnBcuPDjo-VaxR_65Wxv2v8EhoD9z4-E"))

; Rollback => so that Bob is still the winner
(rollback-tx)


;Now the auction goes to its end; We close the defpact
(begin-tx "Close the defpact")
(env-chain-data {"block-time": (time "2023-06-06T00:00:00Z")})
(use marmalade-ng.ledger)
(use marmalade-ng.policy-auction-sale)

(expect-that "It should exist 0 active sale" (compose (length) (= 0)) (get-all-active-sales))
(expect-that "It should exist 1 ended sale" (compose (length) (= 1)) (get-ended-sales))

;Withdrawing should not work as  there is an existing bidder
(expect-failure "A bidder exist" "Bid active"
                (continue-pact 0 true (hash "auction-sale-1")))

; Try with the bad buyer
(env-data {'buyer:"carol", 'buyer-guard:{'pred:"keys-all", 'keys:["carol-key"]}})
(expect-failure "To early to end the defpact" "uyer does not match"
                (continue-pact 1 false (hash "auction-sale-1")))


(env-data {'buyer:"bob", 'buyer-guard:{'pred:"keys-all", 'keys:["bob-key"]}})

(env-events true)
(continue-pact 1 false (hash "auction-sale-1"))

(ev-analyzer.store (env-events true))
(expect "Event AUCTION-SALE-BOUGHT has been emitted" true (ev-analyzer.is-present "AUCTION-SALE-BOUGHT"))
(expect "Event AUCTION-SALE-BOUGHT -> sale_id" (hash "auction-sale-1") (ev-analyzer.param "AUCTION-SALE-BOUGHT" 0))
(expect "Event AUCTION-SALE-BOUGHT -> token_id" "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" (ev-analyzer.param "AUCTION-SALE-BOUGHT" 1))
(expect "Event AUCTION-SALE-BOUGHT -> price" 13.0 (ev-analyzer.param "AUCTION-SALE-BOUGHT" 2))

; Check that alice has been paid
(expect "Balance should be 1013" 1013.0 (coin.get-balance "alice"))

; Check that bob now owns the NFT
(expect "Balance of bob is 0.1" 0.1 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "bob"))

(expect-that "It should exist 0 active sale" (compose (length) (= 0)) (get-all-active-sales))
(expect-that "It should exist 0 active sale" (compose (length) (= 0)) (get-sales-for-token "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8"))
(expect-that "It should exist 0 ended sale" (compose (length) (= 0)) (get-ended-sales))
(expect-that "It should exist 0 active sale from alice" (compose (length) (= 0)) (get-sales-from-account "alice"))

(commit-tx)

; try another auction but with no bidder
(begin-tx "Sales 2")
(env-hash (hash "auction-sale-2"))
(env-chain-data {"block-time": (time "2023-07-01T00:00:00Z")})
(print (format "Sale ID 2: => {}" [(tx-hash)]))

; Alice will sell 0.2
(use marmalade-ng.ledger)
(use marmalade-ng.policy-auction-sale)

; Verify the initial balance of alice
(expect "Balance of alice is 0.5" 0.5 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice"))


(env-sigs [ {'key:"alice-key", 'caps:[(OFFER "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.2)]}
           ])

(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:10.0, 'increment_ratio:1.1 }})


(sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.2 (time "2023-08-01T00:00:00Z"))

(print (+ "Escrow account: => " (at 'escrow-account (get-sale (tx-hash)))))

(commit-tx)

; try to withdraw before the end of the of the sale
(begin-tx "try withdraw")
(env-chain-data {"block-time": (time "2023-07-14T00:00:00Z")})
(expect-failure "Withdraw too early" "Sale not ended"
                (continue-pact 0 true (hash "auction-sale-2")))
(commit-tx)

; The sale has now ended with no bidders
(begin-tx "Withdraw")
(use marmalade-ng.ledger)
(env-chain-data {"block-time": (time "2023-08-02T00:00:00Z")})

; Try to buy however
(env-data {'buyer:"bob", 'buyer-guard:{'pred:"keys-all", 'keys:["bob-key"]}})
(expect-failure "Bob didn't place a bid" "No bid"
   (continue-pact 1 false (hash "auction-sale-2")))

; But alice should be able to withdraw
(env-events true)
(continue-pact 0 true (hash "auction-sale-2"))

(ev-analyzer.store (env-events true))
(expect "Event AUCTION-SALE-WITHDRAWN has been emitted" true (ev-analyzer.is-present "AUCTION-SALE-WITHDRAWN"))
(expect "Event AUCTION-SALE-WITHDRAWN -> sale_id" (hash "auction-sale-2") (ev-analyzer.param "AUCTION-SALE-WITHDRAWN" 0))
(expect "Event AUCTION-SALE-WITHDRAWN -> token_id" "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" (ev-analyzer.param "AUCTION-SALE-WITHDRAWN" 1))

; Verify that the NFT has been refunded to alice
(expect "Balance of alice is 0.5" 0.5 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice"))


(commit-tx)


;===== AUCTION SALE with shared fees
;
; Let's create a shared fee account
(begin-tx)
(env-data {'ks:["shared-key"]})
(coin.create-account "shared" (read-keyset 'ks))
(commit-tx)

; Alice put into sale
; try another auction but with no bidder
(begin-tx "Sales 3")
(env-hash (hash "auction-sale-3"))
(env-chain-data {"block-time": (time "2023-07-01T00:00:00Z")})
(print (format "Sale ID 3: => {}" [(tx-hash)]))

; Alice will sell 0.2
(use marmalade-ng.ledger)
(use marmalade-ng.policy-auction-sale)

; Verify the initial balance of alice
(expect "Balance of alice is 0.5" 0.5 (get-balance "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice"))


(env-sigs [ {'key:"alice-key", 'caps:[(OFFER "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.2)]}
           ])

(env-data {'marmalade_sale: {'sale_type:"auction", 'currency:coin },
           'marmalade_auction: {'recipient:"alice", 'start_price:10.0, 'increment_ratio:1.1 }})


(sale "t:LWZdYIxjht_J_PCA4RrThTdjD9VDCvkWabnh8tKNST8" "alice" 0.2 (time "2023-08-01T00:00:00Z"))

(print (+ "Escrow account: => " (at 'escrow-account (get-sale (tx-hash)))))

(commit-tx)



(begin-tx "Bob wants to bid on sale 3")
(env-chain-data {"block-time": (time "2023-07-31T00:00:00Z")})
(use marmalade-ng.policy-auction-sale)

(env-data {'bob-ks:["bob-key"],
           'marmalade_shared_fee:{'recipient:"shared"}})


(env-sigs [ {'key:"bob-key", 'caps:[(coin.TRANSFER "bob" "c:oc1R7weJasH-ub6PgJSDROgvX-9osRhU1Mmvm9u9Gbs" 10.0)]}
           ])

(place-bid "YdYqbazQQCnGWkM_5qcOwXQn3XdwyfYISupEUOdN-MY" "bob" (read-keyset 'bob-ks) 10.0)

(commit-tx)


(begin-tx "Close the defpact")
(env-chain-data {"block-time": (time "2023-08-02T00:00:00Z")})
(use marmalade-ng.policy-auction-sale)

; First we don't include shared fee => should not work
(env-data {'buyer:"bob", 'buyer-guard:{'pred:"keys-all", 'keys:["bob-key"]}})
(expect-failure "Without shared fee" "Shared fee doesn't match"
                (continue-pact 1 false (hash "auction-sale-3")))

; Now include it
(env-data {'buyer:"bob", 'buyer-guard:{'pred:"keys-all", 'keys:["bob-key"]},
           'marmalade_shared_fee:{'recipient:"shared"}})
(continue-pact 1 false (hash "auction-sale-3"))

(commit-tx)
